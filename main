import pygame
import  random, os , sys
pygame.init()
size = width, height = 400, 500
screen = pygame.display.set_mode(size)


def load_image(name, colorkey=None):
    fullname = os.path.join('data', name)
    # если файл не существует, то выходим
    if not os.path.isfile(fullname):
        print(f"Файл с изображением '{fullname}' не найден")
        sys.exit()
    image = pygame.image.load(fullname)
    if colorkey is not None:
        image = image.convert()
        if colorkey == -1:
            colorkey = image.get_at((0, 0))
        image.set_colorkey(colorkey)
    else:
        image = image.convert_alpha()
    return image
all_sprites = pygame.sprite.Group()
class Figure(pygame.sprite.Sprite):
    A = []
    image1 = pygame.transform.scale(load_image('tetris s.png',-1),(72,48))
    A.append(image1)
    image2 = pygame.transform.scale(load_image('tetris палка.jpg'),(24,96))
    A.append(image2)
    def __init__(self,mode,*data):
        # НЕОБХОДИМО вызвать конструктор родительского класса Sprite.
        # Это очень важно!!!
        super().__init__(all_sprites)
        self.speed =0
        ch = random.choice(Figure.A)
        self.image = ch
        self.rect = self.image.get_rect()
        self.mask = pygame.mask.from_surface(self.image)
        self.mode = mode
        if self.mode ==0:
            self.rect.x = 20
            self.rect.y = 130
        else:
         if data != ():
            self.mask = pygame.mask.from_surface(self.image)
            self.rect.x =data[0]
            self.rect.y = data[1]
         else:
            self.rect.x = 250
            self.rect.y = 21
    def update(self):
        if pygame.sprite.spritecollide(self, Block,False,pygame.sprite.collide_mask):
            self.speed = 0
            self.add(Block)
            if self.rect.x == 250 and self.rect.y == 21:
                draw_menu()
        else:
            self.speed  = 3
        self.rect = self.rect.move(0,self.speed)
    def set_mode(self, mode):
        self.mode = mode
        self.rect.x = 250
        self.rect.y = 21
    def left(self):
        if self.rect.x-24 <151:
            pass
        else:
            self.rect.x -= 24
            if pygame.sprite.spritecollide(self, Block,False,pygame.sprite.collide_mask):
                self.rect.x+=24
    def right(self):
        if self.rect.x+self.rect[2] > 391:
            pass
        else:
            self.rect.x += 24
            if pygame.sprite.spritecollide(self, Block,False,pygame.sprite.collide_mask):
                self.rect.x -=24
    def turn(self):
        self.image = pygame.transform.rotate(self.image,90)
        self.mask = pygame.mask.from_surface(self.image)
    def refractor(self,row, col):
        New_Figure1 = Figure()
    def get_info(self):
        return (self.rect.x,self.rect.y), self.image
Block = pygame.sprite.Group()
class Border(pygame.sprite.Sprite):
    # строго вертикальный или строго горизонтальный отрезок
    def __init__(self):
        super().__init__(all_sprites)
        self.add(Block)
        self.image = pygame.Surface([230, 1])
        self.rect = pygame.Rect(150, 491, 230, 1)
        self.mask =pygame.mask.from_surface(self.image)
class Buttons():
    def __init__(self,x,y,height,width,color,func,text):
        self.x = x
        self.y = y
        self.height = height
        self.width = width
        self.color = color
        self.func_clicked = func
        self.text = text
    def f(self):
        pygame.draw.rect(screen,self.color,(self.x,self.y,self.width,self.height))
        font = pygame.font.Font(None,self.height)
        text = font.render(self.text,True,(255,255,255))
        screen.blit(text,(self.x,self.y+(self.height*3/20)))
        mouse_pos = pygame.mouse.get_pos()
        mouse_click = pygame.mouse.get_pressed()
        #print(mouse_click)
        if self.x <= mouse_pos[0] <= self.x+self.width and self.y <= mouse_pos[1] <= self.y+self.height:
            pygame.draw.rect(screen,(self.color[0]//2,self.color[1]//2,self.color[2]//2),(self.x,self.y,self.width,self.height))
            if mouse_click[0]==1:
                global t
                t = 1
                screen.fill(0)
                self.func_clicked()
def puk_strenk():
    print('пук среньк')
def update_cup() :
    font = pygame.font.Font(None, 30)
    text_current_score = font.render(f'{current_score}', True, (255, 255, 255))
    screen.blit(text_current_score, (5, 50))
def draw_cup():
    global current_score
    screen.fill((255,255,255))
    #border = Rect((255, 255, 255), (155, 495, 235, 1))
    pygame.draw.rect(screen,(100,100,255),(150,20, 240,480),1)
    font = pygame.font.Font(None,30)
    text_next_figure = font.render('Следующая:',True,(100,100,100))
    text_current_score_info = font.render('Кол-во очков:',True,(255,100,100))
    text_current_score = font.render(f'{current_score}',True,(255,255,255))
    text_pause_info  = font.render('Пауза - SPACE',True,(100,255,100))
    text_exit_info = font.render('Выход - ESC',True,(100,100,255))
    screen.blit(text_next_figure,(5,90))
    screen.blit(text_current_score_info,(5,30))
    screen.blit(text_current_score,(5,50))
    screen.blit(text_pause_info,(5,395))
    screen.blit(text_exit_info,(5,455))
def pause():
    global k_pause
    if k_pause ==0:
        font = pygame.font.Font(None, 30)
        pause_display = pygame.Surface((400,500),pygame.SRCALPHA)
        pause_display.fill((0,0,255,127))
        text_pause = font.render('PAUSE',True,(100,100,100))
        screen.blit(pause_display, (0, 0))
        screen.blit(text_pause,(200,250))
        k_pause =1
    else:
        screen.fill((0,0,0))
        draw_cup()
        k_pause = 0
def draw_end():
    font = pygame.font.Font(None, 50)
    text_score = font.render(f'Вы набрали  0 очков')
    btn_start_screen = Buttons
    btn_play_again = Buttons
    btn_exit = Buttons
def draw_menu():
    global k_menu
    if k_menu ==0:
        menu_display = pygame.Surface((400, 500), pygame.SRCALPHA)
        menu_display.fill((0, 0, 255, 127))
        screen.blit(menu_display, (0, 0))
        font = pygame.font.Font(None, 30)
        text1 = font.render('Вы набрали _ очков',True,(100,255,100))
        pygame.draw.rect(screen,(255,0,0),(80,180,240,140),5)
        screen.blit(text1,(80,200))
        k_menu = 1
class Points(pygame.sprite.Sprite):
    def __init__(self,x,y):
        super().__init__(all_sprites)
        self.rect = pygame.Rect(0,0,1,1)
        self.image = pygame.Surface([1,1])
        self.rect.x = x
        self.rect.y =y
def check_row():
    for j in range(10):
        if all(pygame.sprite.spritecollide(Points(150+12+24*i,490-12-24*j), Block,False,pygame.sprite.collide_mask) for i in range(10))==1:
            for i in range(10):
                a = pygame.sprite.spritecollide(Points(150+12+24*i,490-12-24*j), Block,False,pygame.sprite.collide_mask)
                print(a)
                new_image1 =pygame.Surface(a.rect[2],a.rect[3])
                new_image1.blit(a.image,(0,0,a.rect[2].self.rect[3]-24*j))
                New_Figure1 = Figure(1,a.rect.x,a.rect.y,new_image1)
def draw_demo(widht, height):
    font = pygame.font.Font(None,50)
    text2 = font.render('$RECORDS$!',True,(100,100,255))
    screen.blit(text2,(80,210))
    pygame.draw.polygon(screen,(255,0,0),((width-10,20),(width-10,30),(width-20,40),(width-30,40),(width-40,30),(width-40,20),(width-30,10),(width-20,10)))
if __name__ == '__main__':
    fps =60
    t = 0
    k_pause = 0
    k_menu = 0
    print(f'Следующая\nфигура')
    current_score = 0
    running = True
    clock = pygame.time.Clock()
    screen.fill((255,255,255))
    Start_btn = Buttons(80, 150, 50, 200, (100, 255, 100), draw_cup, 'START')
    draw_demo(size[0], size[1])
    Start_btn.f()
    Border = Border()
    check_row()
    p = 0
    #draw_menu()
    while running:
        for event in pygame.event.get():
            if event.type == pygame.KEYUP:
                if event.key ==pygame.K_SPACE and t ==1:
                    pause()
                if event.key == pygame.K_ESCAPE and t ==1:
                    draw_menu()
                if event.key == pygame.K_a or event.key== pygame.K_LEFT:
                    Falling_Figure.left()
                if event.key == pygame.K_d or event.key== pygame.K_RIGHT:
                    Falling_Figure.right()
                if event.key == pygame.K_w or event.key== pygame.K_UP:
                    Falling_Figure.turn()
                #if event.key == pygame.K_s or event.key== pygame.K_DOWN:
                    #Falling_Figure.drop()
            if event.type == pygame.QUIT:
                running = False
        if k_menu ==1:
            Btn_Exit = Buttons(80, 250, 30, 100, (100, 255, 100), pygame.quit, 'Exit')
            Btn_Exit.f()
        else:
            if t ==0:
                Start_btn.f()
            #if Falling_Figure ==None:
                #pass
            if t==1:
                draw_cup()
                if p ==1:
                    if Falling_Figure.speed == 0:
                        Next_Figure.set_mode(1)
                        Falling_Figure = Next_Figure
                        # Falling_Figure.set_mode(1)
                        Next_Figure = Figure(0, 202 - 48, 21)
                else:
                    Next_Figure = Figure(0)
                    Falling_Figure = Figure(1)
                    p+=1
                Falling_Figure.update()
            if k_menu ==1:
                draw_menu()
            check_row()
            all_sprites.draw(screen)
        clock.tick(fps)
        pygame.display.flip()
    pygame.quit()
    draw_menu()
